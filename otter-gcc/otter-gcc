#!/bin/bash

USAGE="\n\
Usage: otter-gcc [file1] [file2] ... [fileN] [pattern]\n\n\
Examples:\n\
$ otter-gcc program.s int.s\n\
$ otter-gcc src/*.c
"

function cleanup {
    cd "$TOP_LVL" || exit 1
    rm -rf "$WORK_DIR"
    exit "$1"
}

if [ $# -lt 1 ]; then
    echo "Error: No files provided."
    echo -e "$USAGE"
    exit 1
fi

for ARG in "$@"; do
    if [ ! -f "$ARG" ]; then
        echo "Error: File \'$ARG\' does not exist."
        echo -e "$USAGE"
        exit 1
    fi
done

if command -v riscv32-unknown-elf-gcc; then
    TOOLCHAIN=riscv32
elif command -v riscv64-unknown-elf-gcc; then
    TOOLCHAIN=riscv64
else
    echo "Error: riscv{32|64}-unknown-elf-gcc not found in PATH."
    exit 1
fi

TOP_LVL="$(pwd)"
WORK_DIR="$(pwd)/.otter-gcc"

mkdir -p "$WORK_DIR"/src

# Makefile
cat >"$WORK_DIR"/Makefile << EOF
PROJECT = program
BUILD = build

C_FILES := \$(wildcard src/*.c)
AS_FILES := \$(wildcard src/*.s)
ASP_FILES := \$(wildcard src/*.S)

C_OBJ_FILES := \$(patsubst src/%.c,build/%.o,\$(C_FILES))
AS_OBJ_FILES := \$(patsubst src/%.s,build/%.o,\$(AS_FILES))
ASP_OBJ_FILES := \$(patsubst src/%.S,build/%.o,\$(ASP_FILES))

ifneq (\$(C_FILES),)
RISCV_PREFIX = $TOOLCHAIN-unknown-elf-
else
RISCV_PREFIX = $TOOLCHAIN-unknown-elf-
endif
CC = \$(RISCV_PREFIX)gcc
LD = \$(RISCV_PREFIX)ld
OBJCOPY = \$(RISCV_PREFIX)objcopy
OBJDUMP = \$(RISCV_PREFIX)objdump

TARGET_ARCH =  -march=rv32i -mabi=ilp32
ifneq (\$(C_FILES),)
CCFLAGS = -O3 \$(TARGET_ARCH) -g
else
CCFLAGS = -O0 \$(TARGET_ARCH)
endif

all: dirs \$(BUILD)/mem.txt \$(BUILD)/\$(PROJECT).dump

\$(BUILD)/%.o: src/%.c
	\$(CC) -c -o \$@ \$< \$(CCFLAGS)

\$(BUILD)/%.o: src/%.s
	\$(CC) -c -o \$@ \$< \$(CCFLAGS)

\$(BUILD)/%.o: src/%.S
	\$(CC) -c -o \$@ \$< \$(CCFLAGS)

\$(BUILD)/\$(PROJECT).elf: \${AS_OBJ_FILES} \${C_OBJ_FILES} \${ASP_OBJ_FILES}
ifneq (\$(C_FILES),)
	\$(CC)  -o \$@ \$^ -T link.ld \$(CCFLAGS)
else
	\$(CC) -o \$@ \$^ -T link.ld -mno-relax -nostdlib -nostartfiles -mcmodel=medany \$(CCFLAGS)
endif

#-Wl  --no-relax

\$(BUILD)/\$(PROJECT).dump: \$(BUILD)/\$(PROJECT).elf
ifneq (\$(C_FILES),)
	\$(OBJDUMP) --no-show-raw-insn -S -s  \$< > \$@
else
	\$(OBJDUMP) -S -s \$< > \$@
endif

\$(BUILD)/mem.bin: \$(BUILD)/\$(PROJECT).elf
	\$(OBJCOPY) -O binary --only-section=.data* --only-section=.text* \$< \$@

\$(BUILD)/mem.txt: \$(BUILD)/mem.bin
	hexdump -v -e '"%08x\n"' \$< > \$@

dirs:
	mkdir -p \$(BUILD)

clean:
	rm -rf \$(BUILD)

print-%  : ; @echo \$* = \$(\$*)
EOF

# link.ld
cat > "$WORK_DIR"/link.ld << EOF
__sp = 0x10000;

SECTIONS
{
    . =0x00000000;
    .text.init : {
        *(.text.init)
    }

    .text : {
        *(.text)
    }

    __global_pointer\$ = .  + 0x800;
    .data : {
        *(.sbss)
        *(COMMON)
        *(.bss)

        *(.data*)
        *(.sdata)
	*(.srodata*)
         *(.rodata)
        *(.got*)
	/**(._edata*)*/
	*(._end)
    	/*_edata=.;*/
	 _edata = .; PROVIDE (edata = .);
 	. = .;
    }

    /*_edata = .; PROVIDE (edata = .);*/
    _end=.;
}
EOF

cp "$@" -t "$WORK_DIR"/src
cd "$WORK_DIR" || exit 1
make || cleanup 1

cd "$TOP_LVL" || exit 1
cp "$WORK_DIR"/build/{mem.bin,mem.txt,program.dump} .

cleanup
